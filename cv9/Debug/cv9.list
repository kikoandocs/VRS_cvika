
cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003628  08003628  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003628  08003628  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003628  08003628  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082ad  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d4  00000000  00000000  000282f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0002a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ee4  00000000  00000000  0002add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000067e6  00000000  00000000  00041cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a133  00000000  00000000  000484a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c25d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002304  00000000  00000000  000c2628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035f4 	.word	0x080035f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080035f4 	.word	0x080035f4

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <setDigt1>:
	LL_GPIO_ResetOutputPin(digt2_GPIO_Port, digt2_Pin);
	LL_GPIO_ResetOutputPin(digt3_GPIO_Port, digt3_Pin);
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
	LL_GPIO_ResetOutputPin(digt5_GPIO_Port, digt5_Pin);
}
void setDigt1(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(digt1_GPIO_Port, digt1_Pin);
 8000204:	2101      	movs	r1, #1
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <setDigt1+0x3c>)
 8000208:	f7ff ffde 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(digt2_GPIO_Port, digt2_Pin);
 800020c:	2110      	movs	r1, #16
 800020e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000212:	f7ff ffe7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt3_GPIO_Port, digt3_Pin);
 8000216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f7ff ffe1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
 8000222:	2104      	movs	r1, #4
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f7ff ffdc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt5_GPIO_Port, digt5_Pin);
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000232:	f7ff ffd7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	48000400 	.word	0x48000400

08000240 <setDigt2>:
void setDigt2(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(digt2_GPIO_Port, digt2_Pin);
 8000244:	2110      	movs	r1, #16
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f7ff ffbd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(digt1_GPIO_Port, digt1_Pin);
 800024e:	2101      	movs	r1, #1
 8000250:	480a      	ldr	r0, [pc, #40]	; (800027c <setDigt2+0x3c>)
 8000252:	f7ff ffc7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt3_GPIO_Port, digt3_Pin);
 8000256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f7ff ffc1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
 8000262:	2104      	movs	r1, #4
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f7ff ffbc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt5_GPIO_Port, digt5_Pin);
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000272:	f7ff ffb7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	48000400 	.word	0x48000400

08000280 <setDigt3>:
void setDigt3(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(digt3_GPIO_Port, digt3_Pin);
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f7ff ff9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(digt1_GPIO_Port, digt1_Pin);
 8000290:	2101      	movs	r1, #1
 8000292:	480a      	ldr	r0, [pc, #40]	; (80002bc <setDigt3+0x3c>)
 8000294:	f7ff ffa6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt2_GPIO_Port, digt2_Pin);
 8000298:	2110      	movs	r1, #16
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f7ff ffa1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
 80002a2:	2104      	movs	r1, #4
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a8:	f7ff ff9c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt5_GPIO_Port, digt5_Pin);
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f7ff ff97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	48000400 	.word	0x48000400

080002c0 <setDigt4>:
void setDigt4(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(digt4_GPIO_Port, digt4_Pin);
 80002c4:	2104      	movs	r1, #4
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f7ff ff7d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(digt1_GPIO_Port, digt1_Pin);
 80002ce:	2101      	movs	r1, #1
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <setDigt4+0x44>)
 80002d2:	f7ff ff87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt2_GPIO_Port, digt2_Pin);
 80002d6:	2110      	movs	r1, #16
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f7ff ff82 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt3_GPIO_Port, digt3_Pin);
 80002e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f7ff ff7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
 80002ec:	2104      	movs	r1, #4
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f7ff ff77 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digt5_GPIO_Port, digt5_Pin);
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f7ff ff72 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000400 	.word	0x48000400

08000308 <set_>:
	LL_GPIO_ResetOutputPin(digt1_GPIO_Port, digt1_Pin);
	LL_GPIO_ResetOutputPin(digt2_GPIO_Port, digt2_Pin);
	LL_GPIO_ResetOutputPin(digt3_GPIO_Port, digt3_Pin);
	LL_GPIO_ResetOutputPin(digt4_GPIO_Port, digt4_Pin);
}
void set_(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	// _ = 0001000
		LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 800030c:	2102      	movs	r1, #2
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f7ff ff59 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 8000316:	2101      	movs	r1, #1
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f7ff ff54 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 8000320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f7ff ff4e 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 800032c:	2120      	movs	r1, #32
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <set_+0x58>)
 8000330:	f7ff ff58 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 8000334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f7ff ff44 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 8000340:	2108      	movs	r1, #8
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f7ff ff3f 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 800034a:	2110      	movs	r1, #16
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <set_+0x58>)
 800034e:	f7ff ff3b 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000352:	2102      	movs	r1, #2
 8000354:	4802      	ldr	r0, [pc, #8]	; (8000360 <set_+0x58>)
 8000356:	f7ff ff37 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	48000400 	.word	0x48000400

08000364 <setA>:
void setA(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	// A = 1110111
	LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000368:	2102      	movs	r1, #2
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f7ff ff39 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 8000372:	2101      	movs	r1, #1
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f7ff ff34 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f7ff ff2e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 8000388:	2120      	movs	r1, #32
 800038a:	480c      	ldr	r0, [pc, #48]	; (80003bc <setA+0x58>)
 800038c:	f7ff ff1c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f7ff ff24 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 800039c:	2108      	movs	r1, #8
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f7ff ff1f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 80003a6:	2110      	movs	r1, #16
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <setA+0x58>)
 80003aa:	f7ff ff1b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80003ae:	2102      	movs	r1, #2
 80003b0:	4802      	ldr	r0, [pc, #8]	; (80003bc <setA+0x58>)
 80003b2:	f7ff ff09 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	48000400 	.word	0x48000400

080003c0 <setB>:
void setB(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	// b = 0011111
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 80003c4:	2102      	movs	r1, #2
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f7ff fefd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 80003ce:	2101      	movs	r1, #1
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f7ff fef8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 80003d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f7ff ff00 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 80003e4:	2120      	movs	r1, #32
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <setB+0x58>)
 80003e8:	f7ff fefc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f7ff fef6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 80003f8:	2108      	movs	r1, #8
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f7ff fef1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000402:	2110      	movs	r1, #16
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <setB+0x58>)
 8000406:	f7ff feed 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800040a:	2102      	movs	r1, #2
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <setB+0x58>)
 800040e:	f7ff fedb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	48000400 	.word	0x48000400

0800041c <setE>:
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setE(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	// E = 1001111
	LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000420:	2102      	movs	r1, #2
 8000422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000426:	f7ff fedd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 800042a:	2101      	movs	r1, #1
 800042c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000430:	f7ff feca 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 8000434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043c:	f7ff fec4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000440:	2120      	movs	r1, #32
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <setE+0x58>)
 8000444:	f7ff fece 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f7ff fec8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 8000454:	2108      	movs	r1, #8
 8000456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045a:	f7ff fec3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 800045e:	2110      	movs	r1, #16
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <setE+0x58>)
 8000462:	f7ff febf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000466:	2102      	movs	r1, #2
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <setE+0x58>)
 800046a:	f7ff fead 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	48000400 	.word	0x48000400

08000478 <setH>:
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setH(void){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	// H = 0110111
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 800047c:	2102      	movs	r1, #2
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f7ff fea1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 8000486:	2101      	movs	r1, #1
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f7ff feaa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f7ff fea4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 800049c:	2120      	movs	r1, #32
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <setH+0x58>)
 80004a0:	f7ff fe92 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 80004a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ac:	f7ff fe9a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 80004b0:	2108      	movs	r1, #8
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f7ff fe95 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 80004ba:	2110      	movs	r1, #16
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <setH+0x58>)
 80004be:	f7ff fe91 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80004c2:	2102      	movs	r1, #2
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <setH+0x58>)
 80004c6:	f7ff fe7f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	48000400 	.word	0x48000400

080004d4 <setL>:
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setL(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	// L = 0001110
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 80004d8:	2102      	movs	r1, #2
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f7ff fe73 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 80004e2:	2101      	movs	r1, #1
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f7ff fe6e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 80004ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f7ff fe68 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 80004f8:	2120      	movs	r1, #32
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <setL+0x58>)
 80004fc:	f7ff fe72 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f7ff fe6c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 800050c:	2108      	movs	r1, #8
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f7ff fe67 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 8000516:	2110      	movs	r1, #16
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <setL+0x58>)
 800051a:	f7ff fe55 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800051e:	2102      	movs	r1, #2
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <setL+0x58>)
 8000522:	f7ff fe51 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	48000400 	.word	0x48000400

08000530 <setM>:
void setM(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// M = 1010101
	LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000534:	2102      	movs	r1, #2
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f7ff fe53 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 800053e:	2101      	movs	r1, #1
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f7ff fe40 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f7ff fe48 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 8000554:	2120      	movs	r1, #32
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <setM+0x58>)
 8000558:	f7ff fe36 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 800055c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f7ff fe3e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 8000568:	2108      	movs	r1, #8
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f7ff fe2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000572:	2110      	movs	r1, #16
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <setM+0x58>)
 8000576:	f7ff fe35 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800057a:	2102      	movs	r1, #2
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <setM+0x58>)
 800057e:	f7ff fe23 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <setP>:
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setP(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	// P = 1100111
	LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000590:	2102      	movs	r1, #2
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f7ff fe25 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 800059a:	2101      	movs	r1, #1
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f7ff fe20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f7ff fe0c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 80005b0:	2120      	movs	r1, #32
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <setP+0x58>)
 80005b4:	f7ff fe08 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 80005b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f7ff fe10 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 80005c4:	2108      	movs	r1, #8
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f7ff fe0b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 80005ce:	2110      	movs	r1, #16
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <setP+0x58>)
 80005d2:	f7ff fe07 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80005d6:	2102      	movs	r1, #2
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <setP+0x58>)
 80005da:	f7ff fdf5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	48000400 	.word	0x48000400

080005e8 <setR>:
	LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setR(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// R= 0000101
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 80005ec:	2102      	movs	r1, #2
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f7ff fde9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 80005f6:	2101      	movs	r1, #1
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f7ff fde4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 8000600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f7ff fdde 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 800060c:	2120      	movs	r1, #32
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <setR+0x58>)
 8000610:	f7ff fdda 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f7ff fde2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 8000620:	2108      	movs	r1, #8
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f7ff fdcf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 800062a:	2110      	movs	r1, #16
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <setR+0x58>)
 800062e:	f7ff fdd9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000632:	2102      	movs	r1, #2
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <setR+0x58>)
 8000636:	f7ff fdc7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000400 	.word	0x48000400

08000644 <setT>:
	LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void setT(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	// T = 0001111
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 8000648:	2102      	movs	r1, #2
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f7ff fdbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 8000652:	2101      	movs	r1, #1
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f7ff fdb6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f7ff fdb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000668:	2120      	movs	r1, #32
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <setT+0x58>)
 800066c:	f7ff fdba 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f7ff fdb4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 800067c:	2108      	movs	r1, #8
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f7ff fdaf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <setT+0x58>)
 800068a:	f7ff fdab 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800068e:	2102      	movs	r1, #2
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <setT+0x58>)
 8000692:	f7ff fd99 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	48000400 	.word	0x48000400

080006a0 <setU>:
void setU(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	// U = 0111110
	LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 80006a4:	2102      	movs	r1, #2
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff fd8d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 80006ae:	2101      	movs	r1, #1
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f7ff fd96 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f7ff fd90 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 80006c4:	2120      	movs	r1, #32
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <setU+0x58>)
 80006c8:	f7ff fd8c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f7ff fd86 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 80006d8:	2108      	movs	r1, #8
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f7ff fd81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 80006e2:	2110      	movs	r1, #16
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <setU+0x58>)
 80006e6:	f7ff fd6f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80006ea:	2102      	movs	r1, #2
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <setU+0x58>)
 80006ee:	f7ff fd6b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	48000400 	.word	0x48000400

080006fc <set0>:
	LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
	LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
}
void set0(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	// 0 = 1111110
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000700:	2102      	movs	r1, #2
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f7ff fd6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 800070a:	2101      	movs	r1, #1
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f7ff fd68 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f7ff fd62 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000720:	2120      	movs	r1, #32
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <set0+0x58>)
 8000724:	f7ff fd5e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f7ff fd58 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 8000734:	2108      	movs	r1, #8
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f7ff fd53 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 800073e:	2110      	movs	r1, #16
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <set0+0x58>)
 8000742:	f7ff fd41 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000746:	2102      	movs	r1, #2
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <set0+0x58>)
 800074a:	f7ff fd3d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	48000400 	.word	0x48000400

08000758 <set1>:
void set1(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	// 1 = 0110000
		LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 800075c:	2102      	movs	r1, #2
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f7ff fd31 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 8000766:	2101      	movs	r1, #1
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f7ff fd3a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f7ff fd34 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 800077c:	2120      	movs	r1, #32
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <set1+0x58>)
 8000780:	f7ff fd22 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f7ff fd1c 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 8000790:	2108      	movs	r1, #8
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f7ff fd17 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 800079a:	2110      	movs	r1, #16
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <set1+0x58>)
 800079e:	f7ff fd13 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80007a2:	2102      	movs	r1, #2
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <set1+0x58>)
 80007a6:	f7ff fd0f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000400 	.word	0x48000400

080007b4 <set2>:
void set2(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	// 2 = 1101101
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 80007b8:	2102      	movs	r1, #2
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f7ff fd11 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 80007c2:	2101      	movs	r1, #1
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f7ff fd0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segC_Pin);
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f7ff fcf8 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 80007d8:	2120      	movs	r1, #32
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <set2+0x58>)
 80007dc:	f7ff fd02 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 80007e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f7ff fcfc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 80007ec:	2108      	movs	r1, #8
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f7ff fce9 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 80007f6:	2110      	movs	r1, #16
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <set2+0x58>)
 80007fa:	f7ff fcf3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80007fe:	2102      	movs	r1, #2
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <set2+0x58>)
 8000802:	f7ff fce1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	48000400 	.word	0x48000400

08000810 <set3>:
void set3(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	// 3 = 1111001
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000814:	2102      	movs	r1, #2
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f7ff fce3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 800081e:	2101      	movs	r1, #1
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f7ff fcde 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f7ff fcd8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000834:	2120      	movs	r1, #32
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <set3+0x58>)
 8000838:	f7ff fcd4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 800083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f7ff fcc0 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 8000848:	2108      	movs	r1, #8
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f7ff fcbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000852:	2110      	movs	r1, #16
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <set3+0x58>)
 8000856:	f7ff fcc5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800085a:	2102      	movs	r1, #2
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <set3+0x58>)
 800085e:	f7ff fcb3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	48000400 	.word	0x48000400

0800086c <set4>:
void set4(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	// 4 = 0110011
		LL_GPIO_SetOutputPin(GPIOA, segA_Pin);
 8000870:	2102      	movs	r1, #2
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f7ff fca7 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 800087a:	2101      	movs	r1, #1
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f7ff fcb0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f7ff fcaa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 8000890:	2120      	movs	r1, #32
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <set4+0x58>)
 8000894:	f7ff fc98 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 8000898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f7ff fc92 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 80008a4:	2108      	movs	r1, #8
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f7ff fc9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 80008ae:	2110      	movs	r1, #16
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <set4+0x58>)
 80008b2:	f7ff fc97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80008b6:	2102      	movs	r1, #2
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <set4+0x58>)
 80008ba:	f7ff fc85 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	48000400 	.word	0x48000400

080008c8 <set5>:
void set5(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	// 5 = 1011011
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 80008cc:	2102      	movs	r1, #2
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f7ff fc87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 80008d6:	2101      	movs	r1, #1
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f7ff fc74 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f7ff fc7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 80008ec:	2120      	movs	r1, #32
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <set5+0x58>)
 80008f0:	f7ff fc78 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 80008f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f7ff fc64 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 8000900:	2108      	movs	r1, #8
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f7ff fc6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 800090a:	2110      	movs	r1, #16
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <set5+0x58>)
 800090e:	f7ff fc69 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000912:	2102      	movs	r1, #2
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <set5+0x58>)
 8000916:	f7ff fc57 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	48000400 	.word	0x48000400

08000924 <set6>:
void set6(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	// 6 = 1011111
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000928:	2102      	movs	r1, #2
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f7ff fc59 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segB_Pin);
 8000932:	2101      	movs	r1, #1
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f7ff fc46 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f7ff fc4e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000948:	2120      	movs	r1, #32
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <set6+0x58>)
 800094c:	f7ff fc4a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f7ff fc44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 800095c:	2108      	movs	r1, #8
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f7ff fc3f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000966:	2110      	movs	r1, #16
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <set6+0x58>)
 800096a:	f7ff fc3b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 800096e:	2102      	movs	r1, #2
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <set6+0x58>)
 8000972:	f7ff fc29 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	48000400 	.word	0x48000400

08000980 <set7>:
void set7(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	// 7 = 1110000
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000984:	2102      	movs	r1, #2
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f7ff fc2b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 800098e:	2101      	movs	r1, #1
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f7ff fc26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f7ff fc20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segD_Pin);
 80009a4:	2120      	movs	r1, #32
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <set7+0x58>)
 80009a8:	f7ff fc0e 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 80009ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f7ff fc08 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segF_Pin);
 80009b8:	2108      	movs	r1, #8
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f7ff fc03 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, segG_Pin);
 80009c2:	2110      	movs	r1, #16
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <set7+0x58>)
 80009c6:	f7ff fbff 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80009ca:	2102      	movs	r1, #2
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <set7+0x58>)
 80009ce:	f7ff fbfb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	48000400 	.word	0x48000400

080009dc <set8>:
void set8(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	// 8 = 1111111
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 80009e0:	2102      	movs	r1, #2
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f7ff fbfd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 80009ea:	2101      	movs	r1, #1
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f7ff fbf8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f7ff fbf2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000a00:	2120      	movs	r1, #32
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <set8+0x58>)
 8000a04:	f7ff fbee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segE_Pin);
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f7ff fbe8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 8000a14:	2108      	movs	r1, #8
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f7ff fbe3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <set8+0x58>)
 8000a22:	f7ff fbdf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000a26:	2102      	movs	r1, #2
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <set8+0x58>)
 8000a2a:	f7ff fbcd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400

08000a38 <set9>:
void set9(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	// 9 = 1111011
		LL_GPIO_ResetOutputPin(GPIOA, segA_Pin);
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f7ff fbcf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segB_Pin);
 8000a46:	2101      	movs	r1, #1
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f7ff fbca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segC_Pin);
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f7ff fbc4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segD_Pin);
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <set9+0x58>)
 8000a60:	f7ff fbc0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, segE_Pin);
 8000a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f7ff fbac 	bl	80001c8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, segF_Pin);
 8000a70:	2108      	movs	r1, #8
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f7ff fbb5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, segG_Pin);
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <set9+0x58>)
 8000a7e:	f7ff fbb1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000a82:	2102      	movs	r1, #2
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <set9+0x58>)
 8000a86:	f7ff fb9f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	48000400 	.word	0x48000400

08000a94 <setMinus>:
void setMinus(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(segA_GPIO_Port, segA_Pin);
 8000a98:	2102      	movs	r1, #2
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f7ff fb93 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segB_GPIO_Port, segB_Pin);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f7ff fb8e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segC_GPIO_Port, segC_Pin);
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f7ff fb88 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segD_GPIO_Port, segD_Pin);
 8000ab8:	2120      	movs	r1, #32
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <setMinus+0x58>)
 8000abc:	f7ff fb84 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segE_GPIO_Port, segE_Pin);
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f7ff fb7e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segF_GPIO_Port, segF_Pin);
 8000acc:	2108      	movs	r1, #8
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f7ff fb79 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(segG_GPIO_Port, segG_Pin);
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <setMinus+0x58>)
 8000ada:	f7ff fb83 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <setMinus+0x58>)
 8000ae2:	f7ff fb71 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	48000400 	.word	0x48000400

08000af0 <num2seg>:
void num2seg(int8_t number) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	switch (number) {
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	3309      	adds	r3, #9
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d847      	bhi.n	8000b94 <num2seg+0xa4>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <num2seg+0x1c>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b8f 	.word	0x08000b8f
 8000b10:	08000b89 	.word	0x08000b89
 8000b14:	08000b83 	.word	0x08000b83
 8000b18:	08000b7d 	.word	0x08000b7d
 8000b1c:	08000b77 	.word	0x08000b77
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	08000b6b 	.word	0x08000b6b
 8000b28:	08000b65 	.word	0x08000b65
 8000b2c:	08000b5f 	.word	0x08000b5f
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b5f 	.word	0x08000b5f
 8000b38:	08000b65 	.word	0x08000b65
 8000b3c:	08000b6b 	.word	0x08000b6b
 8000b40:	08000b71 	.word	0x08000b71
 8000b44:	08000b77 	.word	0x08000b77
 8000b48:	08000b7d 	.word	0x08000b7d
 8000b4c:	08000b83 	.word	0x08000b83
 8000b50:	08000b89 	.word	0x08000b89
 8000b54:	08000b8f 	.word	0x08000b8f
	case 0:
		set0();
 8000b58:	f7ff fdd0 	bl	80006fc <set0>
		break;
 8000b5c:	e01b      	b.n	8000b96 <num2seg+0xa6>
	case 1:
	case -1:
		set1();
 8000b5e:	f7ff fdfb 	bl	8000758 <set1>
		break;
 8000b62:	e018      	b.n	8000b96 <num2seg+0xa6>
	case 2:
	case -2:
		set2();
 8000b64:	f7ff fe26 	bl	80007b4 <set2>
		break;
 8000b68:	e015      	b.n	8000b96 <num2seg+0xa6>
	case 3:
	case -3:
		set3();
 8000b6a:	f7ff fe51 	bl	8000810 <set3>
		break;
 8000b6e:	e012      	b.n	8000b96 <num2seg+0xa6>
	case 4:
	case -4:
		set4();
 8000b70:	f7ff fe7c 	bl	800086c <set4>
		break;
 8000b74:	e00f      	b.n	8000b96 <num2seg+0xa6>
	case 5:
	case -5:
		set5();
 8000b76:	f7ff fea7 	bl	80008c8 <set5>
		break;
 8000b7a:	e00c      	b.n	8000b96 <num2seg+0xa6>
	case 6:
	case -6:
		set6();
 8000b7c:	f7ff fed2 	bl	8000924 <set6>
		break;
 8000b80:	e009      	b.n	8000b96 <num2seg+0xa6>
	case 7:
	case -7:
		set7();
 8000b82:	f7ff fefd 	bl	8000980 <set7>
		break;
 8000b86:	e006      	b.n	8000b96 <num2seg+0xa6>
	case 8:
	case -8:
		set8();
 8000b88:	f7ff ff28 	bl	80009dc <set8>
		break;
 8000b8c:	e003      	b.n	8000b96 <num2seg+0xa6>
	case 9:
	case -9:
		set9();
 8000b8e:	f7ff ff53 	bl	8000a38 <set9>
		break;
 8000b92:	e000      	b.n	8000b96 <num2seg+0xa6>
	default:
		break;
 8000b94:	bf00      	nop
	}
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <writeToDisplay>:
void writeToDisplay(uint8_t activeParam, uint8_t activeChar, float value) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	ed87 0a00 	vstr	s0, [r7]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	switch (activeParam) {
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d826      	bhi.n	8000c08 <writeToDisplay+0x68>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <writeToDisplay+0x20>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000bdf 	.word	0x08000bdf
 8000bc8:	08000bed 	.word	0x08000bed
 8000bcc:	08000bfb 	.word	0x08000bfb
	case 0:
		writeTemp(activeChar,value);
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	ed97 0a00 	vldr	s0, [r7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f81c 	bl	8000c14 <writeTemp>
		break;
 8000bdc:	e015      	b.n	8000c0a <writeToDisplay+0x6a>
	case 1:
		writeHum(activeChar,value);
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	ed97 0a00 	vldr	s0, [r7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f8e1 	bl	8000dac <writeHum>
		break;
 8000bea:	e00e      	b.n	8000c0a <writeToDisplay+0x6a>
	case 2:
		writeBar(activeChar,value);
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	ed97 0a00 	vldr	s0, [r7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f956 	bl	8000ea4 <writeBar>
		break;
 8000bf8:	e007      	b.n	8000c0a <writeToDisplay+0x6a>
	case 3:
		writeAlt(activeChar,value);
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	ed97 0a00 	vldr	s0, [r7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f9f5 	bl	8000ff0 <writeAlt>
		break;
 8000c06:	e000      	b.n	8000c0a <writeToDisplay+0x6a>
	default:
		break;
 8000c08:	bf00      	nop
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop

08000c14 <writeTemp>:
void writeTemp(uint8_t activeChar, float value) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	ed87 0a00 	vstr	s0, [r7]
 8000c20:	71fb      	strb	r3, [r7, #7]
	//TEMP_xx.x
	if (value >= 100) {
 8000c22:	edd7 7a00 	vldr	s15, [r7]
 8000c26:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000d94 <writeTemp+0x180>
 8000c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	db02      	blt.n	8000c3a <writeTemp+0x26>
		value = 99.9;
 8000c34:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <writeTemp+0x184>)
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e00a      	b.n	8000c50 <writeTemp+0x3c>
	} else if (value <= -100) {
 8000c3a:	edd7 7a00 	vldr	s15, [r7]
 8000c3e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000d9c <writeTemp+0x188>
 8000c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4a:	d801      	bhi.n	8000c50 <writeTemp+0x3c>
		value = -99.9;
 8000c4c:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <writeTemp+0x18c>)
 8000c4e:	603b      	str	r3, [r7, #0]
	}
	int16_t val = value * 10;
 8000c50:	edd7 7a00 	vldr	s15, [r7]
 8000c54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c60:	ee17 3a90 	vmov	r3, s15
 8000c64:	81fb      	strh	r3, [r7, #14]
	int8_t digits[3];
	for (uint8_t i = 0; i < 3; i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	737b      	strb	r3, [r7, #13]
 8000c6a:	e020      	b.n	8000cae <writeTemp+0x9a>
		digits[i] = val % 10;
 8000c6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <writeTemp+0x190>)
 8000c72:	fb83 1302 	smull	r1, r3, r3, r2
 8000c76:	1099      	asrs	r1, r3, #2
 8000c78:	17d3      	asrs	r3, r2, #31
 8000c7a:	1ac9      	subs	r1, r1, r3
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	b252      	sxtb	r2, r2
 8000c8c:	f107 0110 	add.w	r1, r7, #16
 8000c90:	440b      	add	r3, r1
 8000c92:	f803 2c08 	strb.w	r2, [r3, #-8]
		val /= 10;
 8000c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9a:	4a42      	ldr	r2, [pc, #264]	; (8000da4 <writeTemp+0x190>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1092      	asrs	r2, r2, #2
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++) {
 8000ca8:	7b7b      	ldrb	r3, [r7, #13]
 8000caa:	3301      	adds	r3, #1
 8000cac:	737b      	strb	r3, [r7, #13]
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d9db      	bls.n	8000c6c <writeTemp+0x58>
	}
	switch (activeChar) {
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d867      	bhi.n	8000d8a <writeTemp+0x176>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <writeTemp+0xac>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000ce5 	.word	0x08000ce5
 8000cc4:	08000ceb 	.word	0x08000ceb
 8000cc8:	08000cf1 	.word	0x08000cf1
 8000ccc:	08000cf7 	.word	0x08000cf7
 8000cd0:	08000cfd 	.word	0x08000cfd
 8000cd4:	08000d03 	.word	0x08000d03
 8000cd8:	08000d23 	.word	0x08000d23
 8000cdc:	08000d51 	.word	0x08000d51
 8000ce0:	08000d7f 	.word	0x08000d7f
	case 0:
		setT();
 8000ce4:	f7ff fcae 	bl	8000644 <setT>
		break;
 8000ce8:	e050      	b.n	8000d8c <writeTemp+0x178>
	case 1:
		setE();
 8000cea:	f7ff fb97 	bl	800041c <setE>
		break;
 8000cee:	e04d      	b.n	8000d8c <writeTemp+0x178>
	case 2:
		setM();
 8000cf0:	f7ff fc1e 	bl	8000530 <setM>
		break;
 8000cf4:	e04a      	b.n	8000d8c <writeTemp+0x178>
	case 3:
		setP();
 8000cf6:	f7ff fc49 	bl	800058c <setP>
		break;
 8000cfa:	e047      	b.n	8000d8c <writeTemp+0x178>
	case 4:
		set_();
 8000cfc:	f7ff fb04 	bl	8000308 <set_>
		break;
 8000d00:	e044      	b.n	8000d8c <writeTemp+0x178>
	case 5:
		if (value < 0) {
 8000d02:	edd7 7a00 	vldr	s15, [r7]
 8000d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	d502      	bpl.n	8000d16 <writeTemp+0x102>
			setMinus();
 8000d10:	f7ff fec0 	bl	8000a94 <setMinus>
		} else {
			num2seg(digits[2]);
		}
		break;
 8000d14:	e03a      	b.n	8000d8c <writeTemp+0x178>
			num2seg(digits[2]);
 8000d16:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fee8 	bl	8000af0 <num2seg>
		break;
 8000d20:	e034      	b.n	8000d8c <writeTemp+0x178>
	case 6:
		if (value < 0) {
 8000d22:	edd7 7a00 	vldr	s15, [r7]
 8000d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d505      	bpl.n	8000d3c <writeTemp+0x128>
			num2seg(digits[2]);
 8000d30:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fedb 	bl	8000af0 <num2seg>
		} else {
			num2seg(digits[1]);
			LL_GPIO_ResetOutputPin(segDP_GPIO_Port, segDP_Pin);
		}
		break;
 8000d3a:	e027      	b.n	8000d8c <writeTemp+0x178>
			num2seg(digits[1]);
 8000d3c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fed5 	bl	8000af0 <num2seg>
			LL_GPIO_ResetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000d46:	2102      	movs	r1, #2
 8000d48:	4817      	ldr	r0, [pc, #92]	; (8000da8 <writeTemp+0x194>)
 8000d4a:	f7ff fa4b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		break;
 8000d4e:	e01d      	b.n	8000d8c <writeTemp+0x178>
	case 7:
		if (value < 0) {
 8000d50:	edd7 7a00 	vldr	s15, [r7]
 8000d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	d509      	bpl.n	8000d72 <writeTemp+0x15e>
			num2seg(digits[1]);
 8000d5e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fec4 	bl	8000af0 <num2seg>
			LL_GPIO_ResetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <writeTemp+0x194>)
 8000d6c:	f7ff fa3a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		} else {
			num2seg(digits[0]);
		}
		break;
 8000d70:	e00c      	b.n	8000d8c <writeTemp+0x178>
			num2seg(digits[0]);
 8000d72:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff feba 	bl	8000af0 <num2seg>
		break;
 8000d7c:	e006      	b.n	8000d8c <writeTemp+0x178>
	case 8:
		num2seg(digits[0]);
 8000d7e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff feb4 	bl	8000af0 <num2seg>
		break;
 8000d88:	e000      	b.n	8000d8c <writeTemp+0x178>
	default:
		break;
 8000d8a:	bf00      	nop
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	42c80000 	.word	0x42c80000
 8000d98:	42c7cccd 	.word	0x42c7cccd
 8000d9c:	c2c80000 	.word	0xc2c80000
 8000da0:	c2c7cccd 	.word	0xc2c7cccd
 8000da4:	66666667 	.word	0x66666667
 8000da8:	48000400 	.word	0x48000400

08000dac <writeHum>:
void writeHum(uint8_t activeChar, float value) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000db8:	73fb      	strb	r3, [r7, #15]
	//HUM_xx
	if (value >= 100) {
 8000dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dbe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000e98 <writeHum+0xec>
 8000dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	db02      	blt.n	8000dd2 <writeHum+0x26>
		value = 99.9;
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <writeHum+0xf0>)
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	e009      	b.n	8000de6 <writeHum+0x3a>
	} else if (value <= 0) {
 8000dd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	d802      	bhi.n	8000de6 <writeHum+0x3a>
		value = 0;
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
	}
	uint8_t val = value;
 8000de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	edc7 7a01 	vstr	s15, [r7, #4]
 8000df2:	793b      	ldrb	r3, [r7, #4]
 8000df4:	75fb      	strb	r3, [r7, #23]
	int8_t digits[2];
	for (uint8_t i = 0; i < 2; i++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	75bb      	strb	r3, [r7, #22]
 8000dfa:	e01a      	b.n	8000e32 <writeHum+0x86>
		digits[i] = val % 10;
 8000dfc:	7dfa      	ldrb	r2, [r7, #23]
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <writeHum+0xf4>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	7dbb      	ldrb	r3, [r7, #22]
 8000e14:	b252      	sxtb	r2, r2
 8000e16:	f107 0118 	add.w	r1, r7, #24
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f803 2c04 	strb.w	r2, [r3, #-4]
		val /= 10;
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <writeHum+0xf4>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 2; i++) {
 8000e2c:	7dbb      	ldrb	r3, [r7, #22]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	75bb      	strb	r3, [r7, #22]
 8000e32:	7dbb      	ldrb	r3, [r7, #22]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d9e1      	bls.n	8000dfc <writeHum+0x50>
	}
	switch (activeChar) {
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d826      	bhi.n	8000e8c <writeHum+0xe0>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <writeHum+0x98>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e63 	.word	0x08000e63
 8000e4c:	08000e69 	.word	0x08000e69
 8000e50:	08000e6f 	.word	0x08000e6f
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e81 	.word	0x08000e81
	case 0:
		setH();
 8000e5c:	f7ff fb0c 	bl	8000478 <setH>
		break;
 8000e60:	e015      	b.n	8000e8e <writeHum+0xe2>
	case 1:
		setU();
 8000e62:	f7ff fc1d 	bl	80006a0 <setU>
		break;
 8000e66:	e012      	b.n	8000e8e <writeHum+0xe2>
	case 2:
		setM();
 8000e68:	f7ff fb62 	bl	8000530 <setM>
		break;
 8000e6c:	e00f      	b.n	8000e8e <writeHum+0xe2>
	case 3:
		set_();
 8000e6e:	f7ff fa4b 	bl	8000308 <set_>
		break;
 8000e72:	e00c      	b.n	8000e8e <writeHum+0xe2>
	case 4:
		num2seg(digits[1]);
 8000e74:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe39 	bl	8000af0 <num2seg>
		break;
 8000e7e:	e006      	b.n	8000e8e <writeHum+0xe2>
	case 5:
		num2seg(digits[0]);
 8000e80:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe33 	bl	8000af0 <num2seg>
		break;
 8000e8a:	e000      	b.n	8000e8e <writeHum+0xe2>
	default:
		break;
 8000e8c:	bf00      	nop
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	42c80000 	.word	0x42c80000
 8000e9c:	42c7cccd 	.word	0x42c7cccd
 8000ea0:	cccccccd 	.word	0xcccccccd

08000ea4 <writeBar>:
void writeBar(uint8_t activeChar, float value) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	ed87 0a00 	vstr	s0, [r7]
 8000eb0:	71fb      	strb	r3, [r7, #7]
	//BAR_xxxx.xx
	if (value >= 10000) {
 8000eb2:	edd7 7a00 	vldr	s15, [r7]
 8000eb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000fdc <writeBar+0x138>
 8000eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec2:	db02      	blt.n	8000eca <writeBar+0x26>
		value = 9999.99;
 8000ec4:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <writeBar+0x13c>)
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	e009      	b.n	8000ede <writeBar+0x3a>
	} else if (value <= 0) {
 8000eca:	edd7 7a00 	vldr	s15, [r7]
 8000ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d802      	bhi.n	8000ede <writeBar+0x3a>
		value = 0;
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
	}
	uint32_t val = value * 100;
 8000ede:	edd7 7a00 	vldr	s15, [r7]
 8000ee2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000fe4 <writeBar+0x140>
 8000ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	617b      	str	r3, [r7, #20]
	int8_t digits[6];
	for (uint8_t i = 0; i < 6; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	74fb      	strb	r3, [r7, #19]
 8000ef8:	e019      	b.n	8000f2e <writeBar+0x8a>
		digits[i] = val % 10;
 8000efa:	6979      	ldr	r1, [r7, #20]
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <writeBar+0x144>)
 8000efe:	fba3 2301 	umull	r2, r3, r3, r1
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	1aca      	subs	r2, r1, r3
 8000f0e:	7cfb      	ldrb	r3, [r7, #19]
 8000f10:	b252      	sxtb	r2, r2
 8000f12:	f107 0118 	add.w	r1, r7, #24
 8000f16:	440b      	add	r3, r1
 8000f18:	f803 2c0c 	strb.w	r2, [r3, #-12]
		val /= 10;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <writeBar+0x144>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 6; i++) {
 8000f28:	7cfb      	ldrb	r3, [r7, #19]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	74fb      	strb	r3, [r7, #19]
 8000f2e:	7cfb      	ldrb	r3, [r7, #19]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d9e2      	bls.n	8000efa <writeBar+0x56>
	}
	switch (activeChar) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	d84a      	bhi.n	8000fd0 <writeBar+0x12c>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <writeBar+0x9c>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f69 	.word	0x08000f69
 8000f44:	08000f6f 	.word	0x08000f6f
 8000f48:	08000f75 	.word	0x08000f75
 8000f4c:	08000f7b 	.word	0x08000f7b
 8000f50:	08000f81 	.word	0x08000f81
 8000f54:	08000f8d 	.word	0x08000f8d
 8000f58:	08000f99 	.word	0x08000f99
 8000f5c:	08000fa5 	.word	0x08000fa5
 8000f60:	08000fb9 	.word	0x08000fb9
 8000f64:	08000fc5 	.word	0x08000fc5
	case 0:
		setB();
 8000f68:	f7ff fa2a 	bl	80003c0 <setB>
		break;
 8000f6c:	e031      	b.n	8000fd2 <writeBar+0x12e>
	case 1:
		setA();
 8000f6e:	f7ff f9f9 	bl	8000364 <setA>
		break;
 8000f72:	e02e      	b.n	8000fd2 <writeBar+0x12e>
	case 2:
		setR();
 8000f74:	f7ff fb38 	bl	80005e8 <setR>
		break;
 8000f78:	e02b      	b.n	8000fd2 <writeBar+0x12e>
	case 3:
		set_();
 8000f7a:	f7ff f9c5 	bl	8000308 <set_>
		break;
 8000f7e:	e028      	b.n	8000fd2 <writeBar+0x12e>
	case 4:
		num2seg(digits[5]);
 8000f80:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fdb3 	bl	8000af0 <num2seg>
		break;
 8000f8a:	e022      	b.n	8000fd2 <writeBar+0x12e>
	case 5:
		num2seg(digits[4]);
 8000f8c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fdad 	bl	8000af0 <num2seg>
		break;
 8000f96:	e01c      	b.n	8000fd2 <writeBar+0x12e>
	case 6:
		num2seg(digits[3]);
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fda7 	bl	8000af0 <num2seg>
		break;
 8000fa2:	e016      	b.n	8000fd2 <writeBar+0x12e>
	case 7:
		num2seg(digits[2]);
 8000fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fda1 	bl	8000af0 <num2seg>
		LL_GPIO_ResetOutputPin(segDP_GPIO_Port, segDP_Pin);
 8000fae:	2102      	movs	r1, #2
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <writeBar+0x148>)
 8000fb2:	f7ff f917 	bl	80001e4 <LL_GPIO_ResetOutputPin>
		break;
 8000fb6:	e00c      	b.n	8000fd2 <writeBar+0x12e>
	case 8:
		num2seg(digits[1]);
 8000fb8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fd97 	bl	8000af0 <num2seg>
		break;
 8000fc2:	e006      	b.n	8000fd2 <writeBar+0x12e>
	case 9:
		num2seg(digits[0]);
 8000fc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd91 	bl	8000af0 <num2seg>
		break;
 8000fce:	e000      	b.n	8000fd2 <writeBar+0x12e>
	default:
		break;
 8000fd0:	bf00      	nop
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	461c4000 	.word	0x461c4000
 8000fe0:	461c3ff6 	.word	0x461c3ff6
 8000fe4:	42c80000 	.word	0x42c80000
 8000fe8:	cccccccd 	.word	0xcccccccd
 8000fec:	48000400 	.word	0x48000400

08000ff0 <writeAlt>:
void writeAlt(uint8_t activeChar, float value){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	ed87 0a00 	vstr	s0, [r7]
 8000ffc:	71fb      	strb	r3, [r7, #7]
	//ALT_xxxx.x
	if (value >= 10000) {
 8000ffe:	edd7 7a00 	vldr	s15, [r7]
 8001002:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001118 <writeAlt+0x128>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	db02      	blt.n	8001016 <writeAlt+0x26>
			value = 9999.9;
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <writeAlt+0x12c>)
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	e009      	b.n	800102a <writeAlt+0x3a>
		} else if (value <= 0) {
 8001016:	edd7 7a00 	vldr	s15, [r7]
 800101a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d802      	bhi.n	800102a <writeAlt+0x3a>
			value = 0;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
		}
		uint32_t val = value * 10;
 800102a:	edd7 7a00 	vldr	s15, [r7]
 800102e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103a:	ee17 3a90 	vmov	r3, s15
 800103e:	617b      	str	r3, [r7, #20]
		int8_t digits[5];
		for (uint8_t i = 0; i < 5; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	74fb      	strb	r3, [r7, #19]
 8001044:	e019      	b.n	800107a <writeAlt+0x8a>
			digits[i] = val % 10;
 8001046:	6979      	ldr	r1, [r7, #20]
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <writeAlt+0x130>)
 800104a:	fba3 2301 	umull	r2, r3, r3, r1
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	1aca      	subs	r2, r1, r3
 800105a:	7cfb      	ldrb	r3, [r7, #19]
 800105c:	b252      	sxtb	r2, r2
 800105e:	f107 0118 	add.w	r1, r7, #24
 8001062:	440b      	add	r3, r1
 8001064:	f803 2c0c 	strb.w	r2, [r3, #-12]
			val /= 10;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <writeAlt+0x130>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	617b      	str	r3, [r7, #20]
		for (uint8_t i = 0; i < 5; i++) {
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	3301      	adds	r3, #1
 8001078:	74fb      	strb	r3, [r7, #19]
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d9e2      	bls.n	8001046 <writeAlt+0x56>
		}
		switch (activeChar) {
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d842      	bhi.n	800110c <writeAlt+0x11c>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <writeAlt+0x9c>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	080010b1 	.word	0x080010b1
 8001090:	080010b7 	.word	0x080010b7
 8001094:	080010bd 	.word	0x080010bd
 8001098:	080010c3 	.word	0x080010c3
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	080010d5 	.word	0x080010d5
 80010a4:	080010e1 	.word	0x080010e1
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	08001101 	.word	0x08001101
		case 0:
			setA();
 80010b0:	f7ff f958 	bl	8000364 <setA>
			break;
 80010b4:	e02b      	b.n	800110e <writeAlt+0x11e>
		case 1:
			setL();
 80010b6:	f7ff fa0d 	bl	80004d4 <setL>
			break;
 80010ba:	e028      	b.n	800110e <writeAlt+0x11e>
		case 2:
			setT();
 80010bc:	f7ff fac2 	bl	8000644 <setT>
			break;
 80010c0:	e025      	b.n	800110e <writeAlt+0x11e>
		case 3:
			set_();
 80010c2:	f7ff f921 	bl	8000308 <set_>
			break;
 80010c6:	e022      	b.n	800110e <writeAlt+0x11e>
		case 4:
			num2seg(digits[4]);
 80010c8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fd0f 	bl	8000af0 <num2seg>
			break;
 80010d2:	e01c      	b.n	800110e <writeAlt+0x11e>
		case 5:
			num2seg(digits[3]);
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fd09 	bl	8000af0 <num2seg>
			break;
 80010de:	e016      	b.n	800110e <writeAlt+0x11e>
		case 6:
			num2seg(digits[2]);
 80010e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd03 	bl	8000af0 <num2seg>
			break;
 80010ea:	e010      	b.n	800110e <writeAlt+0x11e>
		case 7:
			num2seg(digits[1]);
 80010ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fcfd 	bl	8000af0 <num2seg>
			LL_GPIO_ResetOutputPin(segDP_GPIO_Port, segDP_Pin);
 80010f6:	2102      	movs	r1, #2
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <writeAlt+0x134>)
 80010fa:	f7ff f873 	bl	80001e4 <LL_GPIO_ResetOutputPin>
			break;
 80010fe:	e006      	b.n	800110e <writeAlt+0x11e>
		case 8:
			num2seg(digits[0]);
 8001100:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fcf3 	bl	8000af0 <num2seg>
			break;
 800110a:	e000      	b.n	800110e <writeAlt+0x11e>
		default:
			break;
 800110c:	bf00      	nop
		}
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	461c4000 	.word	0x461c4000
 800111c:	461c3f9a 	.word	0x461c3f9a
 8001120:	cccccccd 	.word	0xcccccccd
 8001124:	48000400 	.word	0x48000400

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4013      	ands	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000

0800126c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <LL_SYSCFG_SetEXTISource+0x58>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3302      	adds	r3, #2
 800127e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	43db      	mvns	r3, r3
 8001288:	ea02 0103 	and.w	r1, r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	fa03 f202 	lsl.w	r2, r3, r2
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <LL_SYSCFG_SetEXTISource+0x58>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	430a      	orrs	r2, r1
 80012b2:	3302      	adds	r3, #2
 80012b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40010000 	.word	0x40010000

080012c8 <LL_GPIO_SetPinMode>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	613b      	str	r3, [r7, #16]
  return result;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2103      	movs	r1, #3
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	61bb      	str	r3, [r7, #24]
  return result;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_GPIO_SetPinPull>:
{
 8001326:	b480      	push	{r7}
 8001328:	b089      	sub	sp, #36	; 0x24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	613b      	str	r3, [r7, #16]
  return result;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2103      	movs	r1, #3
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	401a      	ands	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	61bb      	str	r3, [r7, #24]
  return result;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	60da      	str	r2, [r3, #12]
}
 8001378:	bf00      	nop
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_GPIO_SetOutputPin>:
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	619a      	str	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_GPIO_ResetOutputPin>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013e2:	f7ff ff2b 	bl	800123c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013ea:	f7ff ff27 	bl	800123c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, segB_Pin|segA_Pin|segF_Pin|segC_Pin
 80013ee:	f640 110b 	movw	r1, #2315	; 0x90b
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff ffc5 	bl	8001384 <LL_GPIO_SetOutputPin>
                          |segE_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOB, segDP_Pin|segG_Pin|segD_Pin);
 80013fa:	2132      	movs	r1, #50	; 0x32
 80013fc:	4840      	ldr	r0, [pc, #256]	; (8001500 <MX_GPIO_Init+0x144>)
 80013fe:	f7ff ffc1 	bl	8001384 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, digt4_Pin|digt2_Pin|digt5_Pin|digt3_Pin);
 8001402:	f241 0194 	movw	r1, #4244	; 0x1094
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f7ff ffc9 	bl	80013a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(digt1_GPIO_Port, digt1_Pin);
 800140e:	2101      	movs	r1, #1
 8001410:	483b      	ldr	r0, [pc, #236]	; (8001500 <MX_GPIO_Init+0x144>)
 8001412:	f7ff ffc5 	bl	80013a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segB_Pin|segA_Pin|segF_Pin|segC_Pin
 8001416:	f640 130b 	movw	r3, #2315	; 0x90b
 800141a:	607b      	str	r3, [r7, #4]
                          |segE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141c:	2301      	movs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 fb30 	bl	8002a98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digt4_Pin|digt2_Pin|digt5_Pin|digt3_Pin;
 8001438:	f241 0394 	movw	r3, #4244	; 0x1094
 800143c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800144a:	2302      	movs	r3, #2
 800144c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f001 fb1f 	bl	8002a98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digt1_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800145e:	2301      	movs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(digt1_GPIO_Port, &GPIO_InitStruct);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4823      	ldr	r0, [pc, #140]	; (8001500 <MX_GPIO_Init+0x144>)
 8001474:	f001 fb10 	bl	8002a98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segDP_Pin|segG_Pin|segD_Pin;
 8001478:	2332      	movs	r3, #50	; 0x32
 800147a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800147c:	2301      	movs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	481b      	ldr	r0, [pc, #108]	; (8001500 <MX_GPIO_Init+0x144>)
 8001492:	f001 fb01 	bl	8002a98 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001496:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fee6 	bl	800126c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BTN_GPIO_Port, BTN_Pin, LL_GPIO_PULL_UP);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2108      	movs	r1, #8
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_GPIO_Init+0x144>)
 80014a6:	f7ff ff3e 	bl	8001326 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN_GPIO_Port, BTN_Pin, LL_GPIO_MODE_INPUT);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2108      	movs	r1, #8
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <MX_GPIO_Init+0x144>)
 80014b0:	f7ff ff0a 	bl	80012c8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80014b4:	2308      	movs	r3, #8
 80014b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f8e8 	bl	80026a8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014d8:	f7ff fe26 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80014dc:	4603      	mov	r3, r0
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe76 	bl	80011d4 <NVIC_EncodePriority>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	2009      	movs	r0, #9
 80014ee:	f7ff fe47 	bl	8001180 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80014f2:	2009      	movs	r0, #9
 80014f4:	f7ff fe26 	bl	8001144 <__NVIC_EnableIRQ>

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	48000400 	.word	0x48000400

08001504 <__NVIC_GetPriorityGrouping>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <__NVIC_EnableIRQ+0x38>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800168a:	f023 0306 	bic.w	r3, r3, #6
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	430a      	orrs	r2, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	60da      	str	r2, [r3, #12]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <LL_AHB1_GRP1_EnableClock>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <LL_APB1_GRP1_EnableClock+0x2c>)
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000

08001748 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001772:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001776:	f7ff ffb7 	bl	80016e8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800177a:	23c0      	movs	r3, #192	; 0xc0
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800177e:	2302      	movs	r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001786:	2301      	movs	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800178e:	2304      	movs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <MX_I2C1_Init+0xd4>)
 8001798:	f001 f97e 	bl	8002a98 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800179c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017a0:	f7ff ffba 	bl	8001718 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017a4:	f7ff feae 	bl	8001504 <__NVIC_GetPriorityGrouping>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fefe 	bl	80015b0 <NVIC_EncodePriority>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	201f      	movs	r0, #31
 80017ba:	f7ff fecf 	bl	800155c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017be:	201f      	movs	r0, #31
 80017c0:	f7ff feae 	bl	8001520 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80017c4:	4816      	ldr	r0, [pc, #88]	; (8001820 <MX_I2C1_Init+0xd8>)
 80017c6:	f7ff ff7e 	bl	80016c6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017ca:	4815      	ldr	r0, [pc, #84]	; (8001820 <MX_I2C1_Init+0xd8>)
 80017cc:	f7ff ff6b 	bl	80016a6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_I2C1_Init+0xd8>)
 80017d2:	f7ff ff40 	bl	8001656 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <MX_I2C1_Init+0xd8>)
 80017d8:	f7ff ff2d 	bl	8001636 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_I2C1_Init+0xdc>)
 80017e2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4808      	ldr	r0, [pc, #32]	; (8001820 <MX_I2C1_Init+0xd8>)
 8001800:	f001 fa5d 	bl	8002cbe <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C1_Init+0xd8>)
 800180a:	f7ff ff34 	bl	8001676 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_I2C1_Init+0xd8>)
 8001810:	f7ff ff01 	bl	8001616 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	; 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	48000400 	.word	0x48000400
 8001820:	40005400 	.word	0x40005400
 8001824:	2000090e 	.word	0x2000090e

08001828 <__NVIC_SetPriorityGrouping>:
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_SetPriority>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_RCC_HSI_Enable+0x1c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <LL_RCC_HSI_Enable+0x1c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <LL_RCC_HSI_IsReady+0x20>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4904      	ldr	r1, [pc, #16]	; (80019b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <LL_RCC_SetSysClkSource+0x24>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 0203 	bic.w	r2, r3, #3
 80019c8:	4904      	ldr	r1, [pc, #16]	; (80019dc <LL_RCC_SetSysClkSource+0x24>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <LL_RCC_GetSysClkSource+0x18>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000

08001a24 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	4904      	ldr	r1, [pc, #16]	; (8001a48 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5c:	4904      	ldr	r1, [pc, #16]	; (8001a70 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000

08001a74 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LL_RCC_SetI2CClockSource+0x2c>)
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0e1b      	lsrs	r3, r3, #24
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a8e:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <LL_RCC_SetI2CClockSource+0x2c>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_APB1_GRP1_EnableClock>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <LL_FLASH_SetLatency+0x24>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 0207 	bic.w	r2, r3, #7
 8001b14:	4904      	ldr	r1, [pc, #16]	; (8001b28 <LL_FLASH_SetLatency+0x24>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40022000 	.word	0x40022000

08001b2c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <LL_FLASH_GetLatency+0x18>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff ffc1 	bl	8001ad4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b56:	f7ff ffa5 	bl	8001aa4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f7ff fe64 	bl	8001828 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001b60:	f7ff fe86 	bl	8001870 <__NVIC_GetPriorityGrouping>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff feb8 	bl	80018e0 <NVIC_EncodePriority>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff fe88 	bl	800188c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7c:	f000 f87e 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b80:	f7ff fc1c 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b84:	f7ff fde0 	bl	8001748 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b88:	f000 fb68 	bl	800225c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b8c:	f000 fbd0 	bl	8002330 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (digitCycle) {
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <main+0x124>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d867      	bhi.n	8001c68 <main+0x120>
 8001b98:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <main+0x58>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bdf 	.word	0x08001bdf
 8001ba8:	08001c0d 	.word	0x08001c0d
 8001bac:	08001c3b 	.word	0x08001c3b
	  case 0:
		  writeToDisplay(actualParam, textPosition + digitCycle, values[actualParam]);
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <main+0x128>)
 8001bb2:	7818      	ldrb	r0, [r3, #0]
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <main+0x12c>)
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <main+0x124>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <main+0x128>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <main+0x130>)
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	f7fe ffe4 	bl	8000ba0 <writeToDisplay>
		  setDigt1();
 8001bd8:	f7fe fb12 	bl	8000200 <setDigt1>
		  break;
 8001bdc:	e045      	b.n	8001c6a <main+0x122>
	  case 1:
		  writeToDisplay(actualParam, textPosition + digitCycle, values[actualParam]);
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <main+0x128>)
 8001be0:	7818      	ldrb	r0, [r3, #0]
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <main+0x12c>)
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <main+0x124>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <main+0x128>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4921      	ldr	r1, [pc, #132]	; (8001c78 <main+0x130>)
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	4611      	mov	r1, r2
 8001c02:	f7fe ffcd 	bl	8000ba0 <writeToDisplay>
		  setDigt2();
 8001c06:	f7fe fb1b 	bl	8000240 <setDigt2>
		  break;
 8001c0a:	e02e      	b.n	8001c6a <main+0x122>
	  case 2:
		  writeToDisplay(actualParam, textPosition + digitCycle, values[actualParam]);
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <main+0x128>)
 8001c0e:	7818      	ldrb	r0, [r3, #0]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <main+0x12c>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <main+0x124>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <main+0x128>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4915      	ldr	r1, [pc, #84]	; (8001c78 <main+0x130>)
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	4611      	mov	r1, r2
 8001c30:	f7fe ffb6 	bl	8000ba0 <writeToDisplay>
		  setDigt3();
 8001c34:	f7fe fb24 	bl	8000280 <setDigt3>
		  break;
 8001c38:	e017      	b.n	8001c6a <main+0x122>
	  case 3:
		  writeToDisplay(actualParam, textPosition + digitCycle, values[actualParam]);
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <main+0x128>)
 8001c3c:	7818      	ldrb	r0, [r3, #0]
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <main+0x12c>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <main+0x124>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <main+0x128>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <main+0x130>)
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	f7fe ff9f 	bl	8000ba0 <writeToDisplay>
		  setDigt4();
 8001c62:	f7fe fb2d 	bl	80002c0 <setDigt4>
		  break;
 8001c66:	e000      	b.n	8001c6a <main+0x122>
	  default:
		  break;
 8001c68:	bf00      	nop
	  switch (digitCycle) {
 8001c6a:	e791      	b.n	8001b90 <main+0x48>
 8001c6c:	20000034 	.word	0x20000034
 8001c70:	20000036 	.word	0x20000036
 8001c74:	20000035 	.word	0x20000035
 8001c78:	20000004 	.word	0x20000004

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff ff3f 	bl	8001b04 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001c86:	bf00      	nop
 8001c88:	f7ff ff50 	bl	8001b2c <LL_FLASH_GetLatency>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1fa      	bne.n	8001c88 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001c92:	f7ff fe59 	bl	8001948 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c96:	bf00      	nop
 8001c98:	f7ff fe66 	bl	8001968 <LL_RCC_HSI_IsReady>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d1fa      	bne.n	8001c98 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001ca2:	2010      	movs	r0, #16
 8001ca4:	f7ff fe72 	bl	800198c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fea7 	bl	80019fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff feb8 	bl	8001a24 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fec9 	bl	8001a4c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff fe7c 	bl	80019b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001cc0:	bf00      	nop
 8001cc2:	f7ff fe8d 	bl	80019e0 <LL_RCC_GetSysClkSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1fa      	bne.n	8001cc2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <SystemClock_Config+0x68>)
 8001cce:	f001 fc47 	bl	8003560 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <SystemClock_Config+0x68>)
 8001cd4:	f001 fc52 	bl	800357c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001cd8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001cdc:	f7ff feca 	bl	8001a74 <LL_RCC_SetI2CClockSource>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <refreshDisplay>:

/* USER CODE BEGIN 4 */
void refreshDisplay() {
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
	digitCycle++;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <refreshDisplay+0x28>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <refreshDisplay+0x28>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	if (digitCycle >= 4) {
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <refreshDisplay+0x28>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d902      	bls.n	8001d06 <refreshDisplay+0x1e>
		digitCycle = 0;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <refreshDisplay+0x28>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	}
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000034 	.word	0x20000034

08001d14 <shiftText>:
void shiftText() {
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
	uint8_t offset = 4;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	71fb      	strb	r3, [r7, #7]
	textPosition += shiftDirection;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <shiftText+0x78>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <shiftText+0x7c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <shiftText+0x78>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	digitCycle = 0;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <shiftText+0x80>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	if (values[actualParam]<0){
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <shiftText+0x84>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <shiftText+0x88>)
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d502      	bpl.n	8001d52 <shiftText+0x3e>
		offset--;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	71fb      	strb	r3, [r7, #7]
	}
	if (textPosition >= textLength[actualParam]-offset || textPosition <= 0) {
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <shiftText+0x78>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <shiftText+0x84>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <shiftText+0x8c>)
 8001d60:	5c5b      	ldrb	r3, [r3, r1]
 8001d62:	4619      	mov	r1, r3
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	1acb      	subs	r3, r1, r3
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	da03      	bge.n	8001d74 <shiftText+0x60>
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <shiftText+0x78>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <shiftText+0x6c>
		shiftDirection *= -1;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <shiftText+0x7c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	425b      	negs	r3, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <shiftText+0x7c>)
 8001d7e:	701a      	strb	r2, [r3, #0]
	}
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20000035 	.word	0x20000035
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000034 	.word	0x20000034
 8001d98:	20000036 	.word	0x20000036
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	0800360c 	.word	0x0800360c

08001da4 <selectParam>:
void selectParam() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	actualParam++;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <selectParam+0x28>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <selectParam+0x28>)
 8001db2:	701a      	strb	r2, [r3, #0]
	if (actualParam >= 4) {
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <selectParam+0x28>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d902      	bls.n	8001dc2 <selectParam+0x1e>
		actualParam = 0;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <selectParam+0x28>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	}
	resetCounters();
 8001dc2:	f000 f805 	bl	8001dd0 <resetCounters>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000036 	.word	0x20000036

08001dd0 <resetCounters>:
void resetCounters() {
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	digitCycle = 0;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <resetCounters+0x20>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
	textPosition = 0;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <resetCounters+0x24>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
	shiftDirection = 1;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <resetCounters+0x28>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	20000034 	.word	0x20000034
 8001df4:	20000035 	.word	0x20000035
 8001df8:	20000000 	.word	0x20000000

08001dfc <LL_I2C_IsActiveFlag_RXNE>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d101      	bne.n	8001e14 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4013      	ands	r3, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40010400 	.word	0x40010400

08001e50 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6153      	str	r3, [r2, #20]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40010400 	.word	0x40010400

08001e70 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f06f 0201 	mvn.w	r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <NMI_Handler+0x4>

08001eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <HardFault_Handler+0x4>

08001ebe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <BusFault_Handler+0x4>

08001eca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <UsageFault_Handler+0x4>

08001ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8001f0c:	2008      	movs	r0, #8
 8001f0e:	f7ff ff89 	bl	8001e24 <LL_EXTI_IsActiveFlag_0_31>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <EXTI3_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f7ff ff99 	bl	8001e50 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    selectParam();
 8001f1e:	f7ff ff41 	bl	8001da4 <selectParam>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 8001f2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f2e:	f7ff ffad 	bl	8001e8c <LL_TIM_IsActiveFlag_UPDATE>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <TIM2_IRQHandler+0x16>
		shiftText();
 8001f38:	f7ff feec 	bl	8001d14 <shiftText>
	}
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8001f3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f40:	f7ff ff96 	bl	8001e70 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM3)) {
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <TIM3_IRQHandler+0x20>)
 8001f4e:	f7ff ff9d 	bl	8001e8c <LL_TIM_IsActiveFlag_UPDATE>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <TIM3_IRQHandler+0x14>
		refreshDisplay();
 8001f58:	f7ff fec6 	bl	8001ce8 <refreshDisplay>
		}
		LL_TIM_ClearFlag_UPDATE(TIM3);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM3_IRQHandler+0x20>)
 8001f5e:	f7ff ff87 	bl	8001e70 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40000400 	.word	0x40000400

08001f6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <I2C1_EV_IRQHandler+0x10>)
 8001f72:	f7ff ff43 	bl	8001dfc <LL_I2C_IsActiveFlag_RXNE>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005400 	.word	0x40005400

08001f80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <SystemInit+0x20>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <SystemInit+0x20>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <LL_APB1_GRP1_EnableClock>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4013      	ands	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000

080020e8 <LL_TIM_EnableCounter>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_TIM_DisableARRPreload>:
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_TIM_OC_DisableFast>:
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d028      	beq.n	800218a <LL_TIM_OC_DisableFast+0x62>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d023      	beq.n	8002186 <LL_TIM_OC_DisableFast+0x5e>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d01e      	beq.n	8002182 <LL_TIM_OC_DisableFast+0x5a>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d019      	beq.n	800217e <LL_TIM_OC_DisableFast+0x56>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002150:	d013      	beq.n	800217a <LL_TIM_OC_DisableFast+0x52>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002158:	d00d      	beq.n	8002176 <LL_TIM_OC_DisableFast+0x4e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d007      	beq.n	8002172 <LL_TIM_OC_DisableFast+0x4a>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d101      	bne.n	800216e <LL_TIM_OC_DisableFast+0x46>
 800216a:	2307      	movs	r3, #7
 800216c:	e00e      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 800216e:	2308      	movs	r3, #8
 8002170:	e00c      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 8002172:	2306      	movs	r3, #6
 8002174:	e00a      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 8002176:	2305      	movs	r3, #5
 8002178:	e008      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 800217a:	2304      	movs	r3, #4
 800217c:	e006      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 800217e:	2303      	movs	r3, #3
 8002180:	e004      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_TIM_OC_DisableFast+0x64>
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3318      	adds	r3, #24
 8002192:	4619      	mov	r1, r3
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LL_TIM_OC_DisableFast+0x9c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	440b      	add	r3, r1
 800219c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	4908      	ldr	r1, [pc, #32]	; (80021c8 <LL_TIM_OC_DisableFast+0xa0>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	4619      	mov	r1, r3
 80021aa:	2304      	movs	r3, #4
 80021ac:	408b      	lsls	r3, r1
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	08003610 	.word	0x08003610
 80021c8:	0800361c 	.word	0x0800361c

080021cc <LL_TIM_SetClockSource>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_TIM_SetTriggerOutput>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_TIM_DisableMasterSlaveMode>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2220      	movs	r2, #32
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f9b3 	bl	80035e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff ff1a 	bl	80020b8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002284:	f7ff fe8e 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002288:	4603      	mov	r3, r0
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fede 	bl	8002050 <NVIC_EncodePriority>
 8002294:	4603      	mov	r3, r0
 8002296:	4619      	mov	r1, r3
 8002298:	201c      	movs	r0, #28
 800229a:	f7ff feaf 	bl	8001ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800229e:	201c      	movs	r0, #28
 80022a0:	f7ff fe8e 	bl	8001fc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80022a4:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80022a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 999;
 80022ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80022b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022c2:	f000 fdc9 	bl	8002e58 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80022c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022ca:	f7ff ff1d 	bl	8002108 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80022ce:	2100      	movs	r1, #0
 80022d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022d4:	f7ff ff7a 	bl	80021cc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	461a      	mov	r2, r3
 80022f0:	2101      	movs	r1, #1
 80022f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022f6:	f000 fe21 	bl	8002f3c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80022fa:	2101      	movs	r1, #1
 80022fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002300:	f7ff ff12 	bl	8002128 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002304:	2100      	movs	r1, #0
 8002306:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800230a:	f7ff ff74 	bl	80021f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800230e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002312:	f7ff ff83 	bl	800221c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002316:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800231a:	f7ff ff8f 	bl	800223c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 800231e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002322:	f7ff fee1 	bl	80020e8 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3738      	adds	r7, #56	; 0x38
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	; 0x38
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2220      	movs	r2, #32
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f949 	bl	80035e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002352:	2002      	movs	r0, #2
 8002354:	f7ff feb0 	bl	80020b8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002358:	f7ff fe24 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 800235c:	4603      	mov	r3, r0
 800235e:	2200      	movs	r2, #0
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe74 	bl	8002050 <NVIC_EncodePriority>
 8002368:	4603      	mov	r3, r0
 800236a:	4619      	mov	r1, r3
 800236c:	201d      	movs	r0, #29
 800236e:	f7ff fe45 	bl	8001ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002372:	201d      	movs	r0, #29
 8002374:	f7ff fe24 	bl	8001fc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002378:	f240 331f 	movw	r3, #799	; 0x31f
 800237c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 20;
 8002382:	2314      	movs	r3, #20
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4817      	ldr	r0, [pc, #92]	; (80023f0 <MX_TIM3_Init+0xc0>)
 8002392:	f000 fd61 	bl	8002e58 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002396:	4816      	ldr	r0, [pc, #88]	; (80023f0 <MX_TIM3_Init+0xc0>)
 8002398:	f7ff feb6 	bl	8002108 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800239c:	2100      	movs	r1, #0
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023a0:	f7ff ff14 	bl	80021cc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	461a      	mov	r2, r3
 80023bc:	2101      	movs	r1, #1
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023c0:	f000 fdbc 	bl	8002f3c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80023c4:	2101      	movs	r1, #1
 80023c6:	480a      	ldr	r0, [pc, #40]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023c8:	f7ff feae 	bl	8002128 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80023cc:	2100      	movs	r1, #0
 80023ce:	4808      	ldr	r0, [pc, #32]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023d0:	f7ff ff11 	bl	80021f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023d6:	f7ff ff21 	bl	800221c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023dc:	f7ff ff2e 	bl	800223c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <MX_TIM3_Init+0xc0>)
 80023e2:	f7ff fe81 	bl	80020e8 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40000400 	.word	0x40000400

080023f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopForever+0xe>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopForever+0x16>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800241e:	f7ff fdaf 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f001 f8bb 	bl	800359c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002426:	f7ff fb8f 	bl	8001b48 <main>

0800242a <LoopForever>:

LoopForever:
    b LoopForever
 800242a:	e7fe      	b.n	800242a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800242c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002438:	08003630 	.word	0x08003630
  ldr r2, =_sbss
 800243c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002440:	20000038 	.word	0x20000038

08002444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_2_IRQHandler>
	...

08002448 <LL_EXTI_EnableIT_0_31>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <LL_EXTI_EnableIT_0_31+0x20>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <LL_EXTI_EnableIT_0_31+0x20>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40010400 	.word	0x40010400

0800246c <LL_EXTI_EnableIT_32_63>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <LL_EXTI_EnableIT_32_63+0x20>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <LL_EXTI_EnableIT_32_63+0x20>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	620b      	str	r3, [r1, #32]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40010400 	.word	0x40010400

08002490 <LL_EXTI_DisableIT_0_31>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	43db      	mvns	r3, r3
 80024a0:	4904      	ldr	r1, [pc, #16]	; (80024b4 <LL_EXTI_DisableIT_0_31+0x24>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40010400 	.word	0x40010400

080024b8 <LL_EXTI_DisableIT_32_63>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <LL_EXTI_DisableIT_32_63+0x24>)
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <LL_EXTI_DisableIT_32_63+0x24>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	620b      	str	r3, [r1, #32]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40010400 	.word	0x40010400

080024e0 <LL_EXTI_EnableEvent_0_31>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <LL_EXTI_EnableEvent_0_31+0x20>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <LL_EXTI_EnableEvent_0_31+0x20>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40010400 	.word	0x40010400

08002504 <LL_EXTI_EnableEvent_32_63>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <LL_EXTI_EnableEvent_32_63+0x20>)
 800250e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40010400 	.word	0x40010400

08002528 <LL_EXTI_DisableEvent_0_31>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	43db      	mvns	r3, r3
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <LL_EXTI_DisableEvent_0_31+0x24>)
 800253a:	4013      	ands	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40010400 	.word	0x40010400

08002550 <LL_EXTI_DisableEvent_32_63>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <LL_EXTI_DisableEvent_32_63+0x24>)
 800255a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	43db      	mvns	r3, r3
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002562:	4013      	ands	r3, r2
 8002564:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40010400 	.word	0x40010400

08002578 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40010400 	.word	0x40010400

0800259c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80025a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a8:	4904      	ldr	r1, [pc, #16]	; (80025bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	628b      	str	r3, [r1, #40]	; 0x28
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40010400 	.word	0x40010400

080025c0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4904      	ldr	r1, [pc, #16]	; (80025e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010400 	.word	0x40010400

080025e8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80025f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4904      	ldr	r1, [pc, #16]	; (800260c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40010400 	.word	0x40010400

08002610 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4904      	ldr	r1, [pc, #16]	; (8002630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40010400 	.word	0x40010400

08002634 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40010400 	.word	0x40010400

08002658 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	43db      	mvns	r3, r3
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800266a:	4013      	ands	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010400 	.word	0x40010400

08002680 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	43db      	mvns	r3, r3
 8002690:	4904      	ldr	r1, [pc, #16]	; (80026a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002692:	4013      	ands	r3, r2
 8002694:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010400 	.word	0x40010400

080026a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7a1b      	ldrb	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80cd 	beq.w	8002858 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d061      	beq.n	800278a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7a5b      	ldrb	r3, [r3, #9]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d01c      	beq.n	8002708 <LL_EXTI_Init+0x60>
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	dc25      	bgt.n	800271e <LL_EXTI_Init+0x76>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <LL_EXTI_Init+0x34>
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d00b      	beq.n	80026f2 <LL_EXTI_Init+0x4a>
 80026da:	e020      	b.n	800271e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff21 	bl	8002528 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff feac 	bl	8002448 <LL_EXTI_EnableIT_0_31>
          break;
 80026f0:	e018      	b.n	8002724 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff feca 	bl	8002490 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff feed 	bl	80024e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002706:	e00d      	b.n	8002724 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fe9b 	bl	8002448 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fee2 	bl	80024e0 <LL_EXTI_EnableEvent_0_31>
          break;
 800271c:	e002      	b.n	8002724 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
          break;
 8002722:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7a9b      	ldrb	r3, [r3, #10]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02e      	beq.n	800278a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7a9b      	ldrb	r3, [r3, #10]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d01c      	beq.n	800276e <LL_EXTI_Init+0xc6>
 8002734:	2b03      	cmp	r3, #3
 8002736:	dc25      	bgt.n	8002784 <LL_EXTI_Init+0xdc>
 8002738:	2b01      	cmp	r3, #1
 800273a:	d002      	beq.n	8002742 <LL_EXTI_Init+0x9a>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d00b      	beq.n	8002758 <LL_EXTI_Init+0xb0>
 8002740:	e020      	b.n	8002784 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff86 	bl	8002658 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff11 	bl	8002578 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002756:	e019      	b.n	800278c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff2f 	bl	80025c0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff52 	bl	8002610 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800276c:	e00e      	b.n	800278c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff00 	bl	8002578 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff47 	bl	8002610 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002782:	e003      	b.n	800278c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
            break;
 8002788:	e000      	b.n	800278c <LL_EXTI_Init+0xe4>
        }
      }
 800278a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d076      	beq.n	8002882 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7a5b      	ldrb	r3, [r3, #9]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d01c      	beq.n	80027d6 <LL_EXTI_Init+0x12e>
 800279c:	2b02      	cmp	r3, #2
 800279e:	dc25      	bgt.n	80027ec <LL_EXTI_Init+0x144>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <LL_EXTI_Init+0x102>
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d00b      	beq.n	80027c0 <LL_EXTI_Init+0x118>
 80027a8:	e020      	b.n	80027ec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fece 	bl	8002550 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe57 	bl	800246c <LL_EXTI_EnableIT_32_63>
          break;
 80027be:	e018      	b.n	80027f2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fe77 	bl	80024b8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fe98 	bl	8002504 <LL_EXTI_EnableEvent_32_63>
          break;
 80027d4:	e00d      	b.n	80027f2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe46 	bl	800246c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fe8d 	bl	8002504 <LL_EXTI_EnableEvent_32_63>
          break;
 80027ea:	e002      	b.n	80027f2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
          break;
 80027f0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7a9b      	ldrb	r3, [r3, #10]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d043      	beq.n	8002882 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7a9b      	ldrb	r3, [r3, #10]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d01c      	beq.n	800283c <LL_EXTI_Init+0x194>
 8002802:	2b03      	cmp	r3, #3
 8002804:	dc25      	bgt.n	8002852 <LL_EXTI_Init+0x1aa>
 8002806:	2b01      	cmp	r3, #1
 8002808:	d002      	beq.n	8002810 <LL_EXTI_Init+0x168>
 800280a:	2b02      	cmp	r3, #2
 800280c:	d00b      	beq.n	8002826 <LL_EXTI_Init+0x17e>
 800280e:	e020      	b.n	8002852 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff33 	bl	8002680 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff febc 	bl	800259c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002824:	e02e      	b.n	8002884 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fedc 	bl	80025e8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fefd 	bl	8002634 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800283a:	e023      	b.n	8002884 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff feab 	bl	800259c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fef2 	bl	8002634 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002850:	e018      	b.n	8002884 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
            break;
 8002856:	e015      	b.n	8002884 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe17 	bl	8002490 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fe5e 	bl	8002528 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fe21 	bl	80024b8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe68 	bl	8002550 <LL_EXTI_DisableEvent_32_63>
 8002880:	e000      	b.n	8002884 <LL_EXTI_Init+0x1dc>
      }
 8002882:	bf00      	nop
#endif
  }
  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <LL_GPIO_SetPinMode>:
{
 800288e:	b480      	push	{r7}
 8002890:	b089      	sub	sp, #36	; 0x24
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	613b      	str	r3, [r7, #16]
  return result;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2103      	movs	r1, #3
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	401a      	ands	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	61bb      	str	r3, [r7, #24]
  return result;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	431a      	orrs	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_GPIO_SetPinOutputType>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_GPIO_SetPinSpeed>:
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	613b      	str	r3, [r7, #16]
  return result;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2103      	movs	r1, #3
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	61bb      	str	r3, [r7, #24]
  return result;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_GPIO_SetPinPull>:
{
 800297a:	b480      	push	{r7}
 800297c:	b089      	sub	sp, #36	; 0x24
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	613b      	str	r3, [r7, #16]
  return result;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2103      	movs	r1, #3
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	401a      	ands	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	61bb      	str	r3, [r7, #24]
  return result;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	60da      	str	r2, [r3, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3724      	adds	r7, #36	; 0x24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_GPIO_SetAFPin_0_7>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	613b      	str	r3, [r7, #16]
  return result;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	210f      	movs	r1, #15
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	61bb      	str	r3, [r7, #24]
  return result;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_GPIO_SetAFPin_8_15>:
{
 8002a36:	b480      	push	{r7}
 8002a38:	b089      	sub	sp, #36	; 0x24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	613b      	str	r3, [r7, #16]
  return result;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	210f      	movs	r1, #15
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	61bb      	str	r3, [r7, #24]
  return result;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	431a      	orrs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a8c:	bf00      	nop
 8002a8e:	3724      	adds	r7, #36	; 0x24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	613b      	str	r3, [r7, #16]
  return result;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002aba:	e051      	b.n	8002b60 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d043      	beq.n	8002b5a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d003      	beq.n	8002ae2 <LL_GPIO_Init+0x4a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d10e      	bne.n	8002b00 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff16 	bl	800291c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	461a      	mov	r2, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fef6 	bl	80028ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	461a      	mov	r2, r3
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff36 	bl	800297a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d11a      	bne.n	8002b4c <LL_GPIO_Init+0xb4>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	60bb      	str	r3, [r7, #8]
  return result;
 8002b22:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d807      	bhi.n	8002b3e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	461a      	mov	r2, r3
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ff4e 	bl	80029d8 <LL_GPIO_SetAFPin_0_7>
 8002b3c:	e006      	b.n	8002b4c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	461a      	mov	r2, r3
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff75 	bl	8002a36 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	461a      	mov	r2, r3
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fe9a 	bl	800288e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1a6      	bne.n	8002abc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <LL_I2C_Enable>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_I2C_Disable>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0201 	bic.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_I2C_ConfigFilters>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0219      	lsls	r1, r3, #8
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_I2C_SetOwnAddress1>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_I2C_EnableOwnAddress1>:
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_I2C_DisableOwnAddress1>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_I2C_SetTiming>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	611a      	str	r2, [r3, #16]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_I2C_SetMode>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff65 	bl	8002b98 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff6d 	bl	8002bb8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffb6 	bl	8002c56 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ff44 	bl	8002b78 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ffa0 	bl	8002c36 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6919      	ldr	r1, [r3, #16]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff70 	bl	8002be6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ff81 	bl	8002c16 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa9 	bl	8002c72 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffb6 	bl	8002c98 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <LL_TIM_SetPrescaler>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_TIM_SetAutoReload>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_TIM_SetRepetitionCounter>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_TIM_OC_SetCompareCH1>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_TIM_OC_SetCompareCH2>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_TIM_OC_SetCompareCH3>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_TIM_OC_SetCompareCH4>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_TIM_OC_SetCompareCH5>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_TIM_OC_SetCompareCH6>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <LL_TIM_Init+0xd0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <LL_TIM_Init+0x28>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d003      	beq.n	8002e80 <LL_TIM_Init+0x28>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <LL_TIM_Init+0xd4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d106      	bne.n	8002e8e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <LL_TIM_Init+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <LL_TIM_Init+0x66>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d00f      	beq.n	8002ebe <LL_TIM_Init+0x66>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <LL_TIM_Init+0xd4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <LL_TIM_Init+0x66>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <LL_TIM_Init+0xd8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <LL_TIM_Init+0x66>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <LL_TIM_Init+0xdc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <LL_TIM_Init+0x66>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <LL_TIM_Init+0xe0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d106      	bne.n	8002ecc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff3a 	bl	8002d52 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff26 	bl	8002d36 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <LL_TIM_Init+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <LL_TIM_Init+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <LL_TIM_Init+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <LL_TIM_Init+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <LL_TIM_Init+0xdc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <LL_TIM_Init+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <LL_TIM_Init+0xe0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d105      	bne.n	8002f16 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff2c 	bl	8002d6e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff8d 	bl	8002e36 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800

08002f3c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d045      	beq.n	8002fe0 <LL_TIM_OC_Init+0xa4>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5a:	d848      	bhi.n	8002fee <LL_TIM_OC_Init+0xb2>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d036      	beq.n	8002fd2 <LL_TIM_OC_Init+0x96>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d840      	bhi.n	8002fee <LL_TIM_OC_Init+0xb2>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d027      	beq.n	8002fc4 <LL_TIM_OC_Init+0x88>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d838      	bhi.n	8002fee <LL_TIM_OC_Init+0xb2>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f82:	d018      	beq.n	8002fb6 <LL_TIM_OC_Init+0x7a>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d830      	bhi.n	8002fee <LL_TIM_OC_Init+0xb2>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d003      	beq.n	8002f9a <LL_TIM_OC_Init+0x5e>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d007      	beq.n	8002fa8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002f98:	e029      	b.n	8002fee <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f82d 	bl	8002ffc <OC1Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa6:	e023      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8a0 	bl	80030f0 <OC2Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb4:	e01c      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f917 	bl	80031ec <OC3Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc2:	e015      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f98e 	bl	80032e8 <OC4Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	e00e      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f9ed 	bl	80033b4 <OC5Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8002fde:	e007      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa44 	bl	8003470 <OC6Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e000      	b.n	8002ff0 <LL_TIM_OC_Init+0xb4>
      break;
 8002fee:	bf00      	nop
  }

  return result;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0202 	bic.w	r2, r3, #2
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <OC1Config+0xe4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <OC1Config+0x7e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <OC1Config+0xe8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <OC1Config+0x7e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <OC1Config+0xec>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <OC1Config+0x7e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <OC1Config+0xf0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11e      	bne.n	80030b8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 0208 	bic.w	r2, r3, #8
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0204 	bic.w	r2, r3, #4
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe5d 	bl	8002d8a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0210 	bic.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	0212      	lsls	r2, r2, #8
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0220 	bic.w	r2, r3, #32
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0210 	bic.w	r2, r3, #16
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a21      	ldr	r2, [pc, #132]	; (80031dc <OC2Config+0xec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <OC2Config+0x84>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <OC2Config+0xf0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <OC2Config+0x84>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <OC2Config+0xf4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <OC2Config+0x84>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <OC2Config+0xf8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d11f      	bne.n	80031b4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	019b      	lsls	r3, r3, #6
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fded 	bl	8002da6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <OC3Config+0xec>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00b      	beq.n	800326e <OC3Config+0x82>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <OC3Config+0xf0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <OC3Config+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <OC3Config+0xf4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <OC3Config+0x82>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <OC3Config+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11f      	bne.n	80032ae <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	015b      	lsls	r3, r3, #5
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fd7e 	bl	8002dc2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800

080032e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	0212      	lsls	r2, r2, #8
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	031b      	lsls	r3, r3, #12
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	031b      	lsls	r3, r3, #12
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <OC4Config+0xbc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <OC4Config+0x84>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <OC4Config+0xc0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <OC4Config+0x84>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <OC4Config+0xc4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <OC4Config+0x84>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <OC4Config+0xc8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d107      	bne.n	800337c <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fd25 	bl	8002dde <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800

080033b4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <OC5Config+0xac>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00b      	beq.n	8003428 <OC5Config+0x74>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <OC5Config+0xb0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d007      	beq.n	8003428 <OC5Config+0x74>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a13      	ldr	r2, [pc, #76]	; (8003468 <OC5Config+0xb4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <OC5Config+0x74>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <OC5Config+0xb8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d109      	bne.n	800343c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fcd6 	bl	8002dfa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800

08003470 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	0212      	lsls	r2, r2, #8
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	051b      	lsls	r3, r3, #20
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <OC6Config+0xac>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <OC6Config+0x76>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <OC6Config+0xb0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <OC6Config+0x76>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a12      	ldr	r2, [pc, #72]	; (8003524 <OC6Config+0xb4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <OC6Config+0x76>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <OC6Config+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d109      	bne.n	80034fa <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fc87 	bl	8002e1a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <LL_InitTick+0x30>)
 8003540:	3b01      	subs	r3, #1
 8003542:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <LL_InitTick+0x30>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <LL_InitTick+0x30>)
 800354c:	2205      	movs	r2, #5
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e010 	.word	0xe000e010

08003560 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ffdd 	bl	800352c <LL_InitTick>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <LL_SetSystemCoreClock+0x1c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000014 	.word	0x20000014

0800359c <__libc_init_array>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4d0d      	ldr	r5, [pc, #52]	; (80035d4 <__libc_init_array+0x38>)
 80035a0:	4c0d      	ldr	r4, [pc, #52]	; (80035d8 <__libc_init_array+0x3c>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	2600      	movs	r6, #0
 80035a8:	42a6      	cmp	r6, r4
 80035aa:	d109      	bne.n	80035c0 <__libc_init_array+0x24>
 80035ac:	4d0b      	ldr	r5, [pc, #44]	; (80035dc <__libc_init_array+0x40>)
 80035ae:	4c0c      	ldr	r4, [pc, #48]	; (80035e0 <__libc_init_array+0x44>)
 80035b0:	f000 f820 	bl	80035f4 <_init>
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	2600      	movs	r6, #0
 80035ba:	42a6      	cmp	r6, r4
 80035bc:	d105      	bne.n	80035ca <__libc_init_array+0x2e>
 80035be:	bd70      	pop	{r4, r5, r6, pc}
 80035c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c4:	4798      	blx	r3
 80035c6:	3601      	adds	r6, #1
 80035c8:	e7ee      	b.n	80035a8 <__libc_init_array+0xc>
 80035ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ce:	4798      	blx	r3
 80035d0:	3601      	adds	r6, #1
 80035d2:	e7f2      	b.n	80035ba <__libc_init_array+0x1e>
 80035d4:	08003628 	.word	0x08003628
 80035d8:	08003628 	.word	0x08003628
 80035dc:	08003628 	.word	0x08003628
 80035e0:	0800362c 	.word	0x0800362c

080035e4 <memset>:
 80035e4:	4402      	add	r2, r0
 80035e6:	4603      	mov	r3, r0
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d100      	bne.n	80035ee <memset+0xa>
 80035ec:	4770      	bx	lr
 80035ee:	f803 1b01 	strb.w	r1, [r3], #1
 80035f2:	e7f9      	b.n	80035e8 <memset+0x4>

080035f4 <_init>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr

08003600 <_fini>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr
